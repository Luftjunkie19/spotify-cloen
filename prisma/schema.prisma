// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// model User {
//   id             String          @id @default(auto()) @map("_id") @db.ObjectId
//   name           String
//   email          String          @unique
//   isAdmin        Boolean
//   preferences    Json
//   writtenPosts   Post[]          @relation("writtenPosts")
//   favouritePosts Post[]          @relation("favouritePosts")
//   userPreference UserPreference?
// }

// model UserPreference {
//   id           String  @id @default(auto()) @map("_id") @db.ObjectId
//   emailUpdates Boolean
//   user         User    @relation(fields: [userId], references: [id])
//   userId       String  @unique
// }

// model Post {
//   id             String     @id @default(auto()) @map("_id") @db.ObjectId
//   title          String
//   content        String
//   averageRatinh  Float      @default(0)
//   createdAt      DateTime   @default(now())
//   updatedAt      DateTime   @updatedAt
//   author         User       @relation("writtenPosts", fields: [authorId], references: [id])
//   authorId       String
//   favouritedBy   User?      @relation("favouritePosts", fields: [favouritedById], references: [id])
//   favouritedById String?
//   categories     Category[]
// }

// model Category {
//   id    String @id @default(auto()) @map("_id") @db.ObjectId
//   name  String
//   posts Post[]
// }

// model User {
//   id           String  @id @default(auto()) @map("_id") @db.ObjectId
//   name         String
//   email        String  @unique
//   belovedSongs Song[]  @relation("favouritedBy")
//   songId       String? @db.ObjectId
// }

// model Artist {
//   id          String @id @default(auto()) @map("_id") @db.ObjectId
//   name        String @unique
//   nationality String
//   songs       Song[]
// }

// model Song {
//   id             String   @id @default(auto()) @map("_id") @db.ObjectId
//   rating         Int
//   artist         Artist   @relation(fields: [artistId], references: [id])
//   artistId       String   @db.ObjectId
//   title          String
//   updatedAt      DateTime
//   uploadedAt     DateTime
//   favouritedBy   User[]   @relation("belovedSongs", fields: [id], references: [favouritedById])
//   favouritedById String
// }
