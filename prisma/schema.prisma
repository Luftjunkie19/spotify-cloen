// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model User {
  id               String     @id @default(auto()) @map("_id") @db.ObjectId
  username         String?
  email            String?    @unique
  password         String?
  profileImg       String?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  pastFromLastAds  DateTime   @default(now())
  isSubscribed     Boolean    @default(false)
  availableSkips   Int        @default(6)
  createdPlaylists PlayList[]
  listenedSongs listenedSong[]
  favouriteSongs   String[]   @db.ObjectId
  followed         String[]   @db.ObjectId
  followers        String[]   @db.ObjectId
  isArtist         Boolean    @default(false)
  createdSongs     Song[]
  createdAlbums    Album[] 
  firstName        String?
  lastName         String?
}

model listenedSong {
  id               String     @id @default(auto()) @map("_id") @db.ObjectId
  listenerId  String @db.ObjectId
  listener User @relation(fields: [listenerId], references: [id])
  timeOfListening DateTime @default(now())
  songId String @db.ObjectId
  songObject Song @relation(fields: [songId], references: [id])
}


model Album {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  imageUrl String?
  songs     Song[]
  creatorId String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  creator   User     @relation(fields: [creatorId], references: [id])
}

model Song { 
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  musicPath      String
  songCover      String
  releaseDate    DateTime @default(now())
  artistId       String   @db.ObjectId
  artist         User     @relation(fields: [artistId], references: [id])
  albumId        String?  @db.ObjectId
  belongsToAlbum Album?   @relation(fields: [albumId], references: [id])
  listenedTimes listenedSong[]
  genre          String 
}
model PlayList {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  songs     String[] @db.ObjectId
  imageUrl  String?
  name      String?
  creatorId String   @db.ObjectId
  creator   User     @relation(fields: [creatorId], references: [id])
  createdAt DateTime @default(now())
  likers    String[] @db.ObjectId
}
